syntax = "proto3";
package sf.neo.codec.v1;

message NeoBlock {
  NeoBlockHeader header=1;
  repeated NeoTransaction tx=2;
}

message NeoBlockHeader {
  CryptoHash hash = 1;
  uint64 size = 2;
  uint64 version =3;
  CryptoHash previous_block_hash = 4;
  CryptoHash merkrle_root = 5;
  uint64 time = 6;
  uint64 nonce = 7;   
  uint64 primary = 8;
  repeated Witness witnesses =9;
  Address nextconsensus =10;
  CryptoHash nextblockhash = 11;
  uint64 confirmations = 12;
}
message NeoTransaction {
  CryptoHash hash=1;
  uint64 size = 2;
  uint64 version =3;
  uint64 nonce = 4;   
  Address sender = 5;
  string sysfee = 6;
  string netfee = 7;
  uint64 validuntilblock = 8;
  repeated Signer signers = 9;
  repeated TransactionAttribute attributes = 10;
  bytes script = 11;
  repeated Witness witnesses =12;
  uint64 confirmations = 13;
  uint64 blocktime = 14;
  CryptoHash blockhash = 15;
}

message Witness{
  bytes invocation = 1;
  bytes verification = 2; 
}

message Signer{
  uint64 max_subitems = 1;
  Account account = 2 ;  
  WitnessScope scope = 3;
  repeated Address allowed_contracts = 4;
  repeated PublicKey allowed_groups = 5;
  uint64 size = 6;   
}

message WitnessScope{
  oneof scope{
    CustomContracts custom_contracts = 1;   
    CalledByEntry called_byEntry = 2;
    CustomGroups custom_groups = 3;
    Global global = 4;
    Null null = 5; 
  }
}
 message CustomContracts{}
 message CalledByEntry{}
 message CustomGroups{}
 message Global{}
 message Null{}

   
message TransactionAttribute{
  TransactionAttributeType type = 1;
  bool allowMultiple = 2;
  uint64 size = 3;
}

message TransactionAttributeType{
  oneof type{
     HighPriority high_priority = 1;
     OracleResponse oracle_response= 2;
  } 
}
 
message HighPriority{
  bool allow_multiple = 1;
  TransactionAttributeType Transaction_attribute_type = 2;
}

message OracleResponse{
  uint64 max_result_size = 1;
  bytes fixed_script = 2;
  uint64 id = 3;
  OracleResponseCode code = 4;
  bytes result = 5;
  bool allow_multiple = 6;
  uint64 size = 7;
}
message OracleResponseCode{
  oneof code{
    Success success= 10;
    ProtocolNotSupported protocol_notSupported= 1;
    ConsensusUnreachable  consensus_unreachable= 2;
    NotFound notFound = 3;
    Timeout timeout= 4;
    Forbidden forbidden= 5;
    ResponseTooLarge response_tooLarge= 6;
    InsufficientFunds insufficientFunds= 7;
    ContentTypeNotSupported contentType_NotSupported = 8;
    Error error= 9; 
  }
}
 
message Success{}
message ProtocolNotSupported{}
message ConsensusUnreachable{}
message NotFound{}
message Timeout{}
message Forbidden{}
message ResponseTooLarge{}
message InsufficientFunds{}
message ContentTypeNotSupported{}
message Error{}
 

message PublicKey {
  bytes bytes = 1;
}
message Address{
  bytes address = 1;
}
message CryptoHash{
  bytes hash = 1;
}
message Account{
  bytes hash = 1;
}

 message Execution{
   TriggerType tigger = 1;
   VMState vmstate = 2;
   uint64 gas_consumed = 3;
   string exception_message = 4;
   repeated StackItem  stack_item= 5;
   repeated RpcNotifyEventArgs notify_eventArgs =6;
 }

 message TriggerType{
   oneof type{
    OnPersist on_persist= 6;
    PostPersist post_persist= 1; 
    Verification verification = 2;
    Application application= 3;
    System system= 4;
    All all= 5; 
   }
 }
 message OnPersist{}
 message PostPersist{}
 message Verification{}
 message Application{}
 message System{}
 message All{}
 
message VMState{
  oneof state{
    NONE none= 5;
    HALT halt= 1;
    FAULT fault= 2;
    BREAK break= 4;  
  }
}
message NONE{}
message HALT{}
message FAULT{}
message BREAK{}

message StackItem{
  StackItem null = 1;
  StackItem false = 2;
  StackItem true = 3;
  StackItemType type = 4;
  bool is_null= 5;
}

message StackItemType{
    oneof stack_type{
      ANY any=10;
      Pointer  pointer= 1;
      Boolean bool= 2;
      Integer  int= 3;
      ByteString  byteString= 4;
      Buffer  buffer= 5;  
      Array array= 6; 
      Struct struct= 7;
      Map map= 8;
      InteropInterface interopInterface= 9;   
    }
}
message ANY{}
message Pointer{}
message Boolean{}
message Integer{}
message ByteString{}
message Buffer{}
message Array{}
message Struct{}
message Map{}
message InteropInterface{}

message RpcNotifyEventArgs{
  Address contract = 1;
  string event_name = 2;
  StackItem state = 3;  
}