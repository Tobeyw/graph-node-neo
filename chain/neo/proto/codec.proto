syntax = "proto3";
package sf.neo.codec.v1;

message Block {
  BlockHeader header=1;
  repeated Transaction tx=2;
}

message BlockHeader {
  CryptoHash hash = 1;
  uint64 size = 2;
  uint64 version =3;
  CryptoHash previous_block_hash = 4;
  CryptoHash merkrle_root = 5;
  uint64 time = 6;
  uint64 nounce = 7;   //
  uint64 primary = 8;
  repeated Witness witness =9;
  Address nextconsensus =10;
  CryptoHash nextblockhash = 11;
  uint64 confirmations = 12;
}
message Transaction {
  CryptoHash hash=1;
  uint64 size = 2;
  uint64 version =3;
  uint64 nounce = 4;  //
  Address sender = 5;
  uint64 sysfee = 6;
  uint64 netfee = 7;
  uint64 validuntilblock = 8;
  repeated Signer signers = 9;
  repeated TransactionAttribute attributes = 10;
  bytes script = 11;
  repeated Witness witness =12;
  uint64 confirmations = 13;
  uint64 blocktime = 14;
  CryptoHash blockhash = 15;
}

message Witness{
  bytes invocation = 1;
  bytes verification = 2; 
}

message Signer{
  uint64 max_subitems = 1;
  Account account = 2 ;  
  WitnessScope scope = 3;
  repeated Address allowed_contracts = 4;
  repeated PublicKey allowed_groups = 5;
  uint64 size = 6;   
}

enum WitnessScope{ 
    CustomContracts = 0;   
    CalledByEntry = 1;
    CustomGroups = 2;
    Global = 3;
    Null = 4; 
}  

message TransactionAttribute{
  TransactionAttributeType type = 1;
  bool allowMultiple = 2;
  uint64 size = 3;
}

message TransactionAttributeType{
  oneof type{
     HighPriority high_priority = 1;
     OracleResponse oracle_response= 2;
  } 
}
 
message HighPriority{
  bool allow_multiple = 1;
  TransactionAttributeType Transaction_attribute_type = 2;
}

message OracleResponse{
  uint64 max_result_size = 1;
  bytes fixed_script = 2;
  uint64 id = 3;
  OracleResponseCode code = 4;
  bytes result = 5;
  bool allow_multiple = 6;
  uint64 size = 7;
}

enum OracleResponseCode{ 
    Success = 0;
    ProtocolNotSupported = 1;
    ConsensusUnreachable  = 2;
    NotFound = 3;
    Timeout = 4;
    Forbidden = 5;
    ResponseTooLarge = 6;
    InsufficientFunds = 7;
    ContentTypeNotSupported  = 8;
    Error = 9; 
}  
 

message PublicKey {
  bytes bytes = 1;
}
message Address{
  bytes address = 1;
}
message CryptoHash{
  bytes hash = 1;
}
message Account{
  bytes hash = 1;
}

 message Execution{
   TriggerType tigger = 1;
   VMState vmstate = 2;
   uint64 gasc_consued = 3;
   string exception_message = 4;
   repeated StackItem  stack_item= 5;
   repeated RpcNotifyEventArgs notify_eventArgs =6;
 }

enum TriggerType{  
    OnPersist = 0;
    PostPersist  = 1; 
    Verification = 2;
    Application = 3;
    System  = 4;
    All = 5; 
} 

enum VMState{ 
    None = 0;
    HALT = 1;
    FAULT = 2;
    BREAK = 4;  
}

message StackItem{
  StackItem null = 1;
  StackItem false = 2;
  StackItem true = 3;
  StackItemType type = 4;
  bool is_null= 5;
}
enum StackItemType{  
    Any = 0;
    Pointer  = 1;
    Boolean = 2;
    Integer  = 3;
    ByteString  = 4;
    Buffer  = 5;  
    Array = 6; 
    Struct = 7;
    Map = 8;
    InteropInterface = 9;    
}

message RpcNotifyEventArgs{
  Address contract = 1;
  string event_name = 2;
  StackItem state = 3;  
}